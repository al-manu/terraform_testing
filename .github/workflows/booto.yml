name: Destroy Terraform Resources (DEV, SIT, PROD)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specify the environment to destroy (dev, sit, prod)'
        required: true
        default: 'dev'

jobs:
  create-s3-bucket-state-lock:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}  # Dynamically use the input environment
      url: ${{ steps.deploy.outputs.url }}

    permissions:
      id-token: write  # Required for OIDC authentication
      contents: read   # Access to repository contents

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}  # Use the AWS region from secrets
      TF_VAR_TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}  # Common state bucket for all environments
      # Dynamically select AWS_ROLE_ARN based on environment input
      AWS_ROLE_ARN: ${{ 
        github.event.inputs.environment == 'prod' && secrets.AWS_PROD_ROLE_ARN ||
        github.event.inputs.environment == 'sit' && secrets.AWS_SIT_ROLE_ARN ||
        secrets.AWS_DEV_ROLE_ARN }} # Default to dev if no match

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checkout the code

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8  # Set the Terraform version

      - name: Configure AWS credentials
        id: aws_auth
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}  # Assume the appropriate role dynamically
          aws-region: ${{ env.AWS_REGION }}  # Use the AWS region from the environment
        env:
          AWS_ROLE_ARN: ${{ env.AWS_ROLE_ARN }}  # Use the environment variable for the role ARN
          AWS_REGION: ${{ env.AWS_REGION }}  # Use the environment variable for the AWS region
          TF_VAR_TF_STATE_BUCKET: ${{ env.TF_VAR_TF_STATE_BUCKET }}  # Use the environment variable for the state bucket

      # Ensure S3 Bucket exists for state storage and locking
      - name: Create S3 bucket if not exists
        run: |
          BUCKET_NAME="${{ secrets.TF_STATE_BUCKET }}"  # Use the state bucket name from secrets
          STATE_FILE="terraform/${{ github.event.inputs.environment }}/terraform.tfstate"  # Dynamic state file path based on environment input

          # Check if the bucket exists, if not, create it
          if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "Creating S3 bucket: $BUCKET_NAME"
            # Check if the region is us-east-1 and adjust the create-bucket command
            if [ "${{ secrets.AWS_REGION }}" == "eu-east-1" ]; then
              aws s3api create-bucket --bucket $BUCKET_NAME --region ${{ secrets.AWS_REGION }}
            else
              aws s3api create-bucket --bucket $BUCKET_NAME --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            fi
          else
            echo "S3 bucket $BUCKET_NAME already exists."
          fi
          
          # Create an empty object (state file) to initialize it
          aws s3 cp /dev/null s3://$BUCKET_NAME/$STATE_FILE
          
          echo "S3 bucket $BUCKET_NAME created (if not already) and state file initialized."


