name: Create AWS Resources (S3 Buckets)

on:
  push:
    branches:
      - 'feature/*'  # Trigger on any push to a feature branch

jobs:
  create-resources:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC
      contents: read   # Required for checking out the code
    environment:
      name: dev  # Adjust environment (prod, staging, etc.)
    
    env:
        AWS_ROLE_ARN: ${{ secrets.AWS_DEV_ROLE_ARN }}  # Use the AWS role for dev
        AWS_REGION: ${{ secrets.AWS_REGION }}  # Use the AWS region from secrets
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up AWS credentials using OIDC authentication
      - name: Set up AWS OIDC credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}  # Use the environment variable
          aws-region: ${{ env.AWS_REGION }}  # Use the environment variable

      # Create S3 buckets for Terraform state and lock
      - name: Create S3 buckets for Terraform state and lock
        run: |
          # Define project name and environment
          PROJECT_NAME="dw-test"  # Replace with your project name
          ENVIRONMENT="dev"  # Can be dev, prod, etc.
          REGION="${{ secrets.AWS_REGION }}"

          # Define bucket names
          STATE_BUCKET_NAME="${PROJECT_NAME}-state-${ENVIRONMENT}"
          LOCK_BUCKET_NAME="${PROJECT_NAME}-lock-${ENVIRONMENT}"

          # Check if the state bucket exists
          echo "Checking if the state bucket exists: $STATE_BUCKET_NAME"
          BUCKET_EXISTS=$(aws s3api head-bucket --bucket "$STATE_BUCKET_NAME" --region "$REGION" 2>&1 || true)

          # If the bucket does not exist, create it
          if [[ "$BUCKET_EXISTS" == *"NotFound"* ]]; then
            echo "Creating state bucket: $STATE_BUCKET_NAME"
            aws s3api create-bucket --bucket "$STATE_BUCKET_NAME" --create-bucket-configuration LocationConstraint=$REGION
          else
            echo "Bucket $STATE_BUCKET_NAME already exists. Skipping creation."
          fi

          # Check if the lock bucket exists
          echo "Checking if the lock bucket exists: $LOCK_BUCKET_NAME"
          BUCKET_EXISTS=$(aws s3api head-bucket --bucket "$LOCK_BUCKET_NAME" --region "$REGION" 2>&1 || true)

          # If the bucket does not exist, create it
          if [[ "$BUCKET_EXISTS" == *"NotFound"* ]]; then
            echo "Creating lock bucket: $LOCK_BUCKET_NAME"
            aws s3api create-bucket --bucket "$LOCK_BUCKET_NAME" --create-bucket-configuration LocationConstraint=$REGION
          else
            echo "Bucket $LOCK_BUCKET_NAME already exists. Skipping creation."
          fi

          # Output bucket names for use in subsequent workflows
          echo "state_bucket=$STATE_BUCKET_NAME" >> $GITHUB_ENV
          echo "lock_bucket=$LOCK_BUCKET_NAME" >> $GITHUB_ENV

          # Optionally, enable versioning for the state and lock buckets
          aws s3api put-bucket-versioning --bucket "$STATE_BUCKET_NAME" --versioning-configuration Status=Enabled
          aws s3api put-bucket-versioning --bucket "$LOCK_BUCKET_NAME" --versioning-configuration Status=Enabled

          echo "Created state and lock buckets: $STATE_BUCKET_NAME, $LOCK_BUCKET_NAME"

          # Run Terraform to generate the state file
          echo "Running Terraform to generate state file..."
          terraform init  # Initialize Terraform
          terraform apply -auto-approve  # Apply Terraform configuration (creates state file)

          # Check if the state file exists before uploading
          STATE_FILE="terraform.tfstate"  # Default Terraform state file name
          if [ -f "$STATE_FILE" ]; then
            echo "Uploading Terraform state file to simulated 'tfsate' directory..."
            aws s3 cp "$STATE_FILE" s3://"$STATE_BUCKET_NAME"/tfsate/terraform-state-file.tf
          else
            echo "Terraform state file not found, skipping upload."
          fi

          echo "Uploaded Terraform state file successfully."

          # Similarly, you can upload the Terraform lock file if it exists
          LOCK_FILE="terraform.lock.hcl"  # Terraform lock file
          if [ -f "$LOCK_FILE" ]; then
            echo "Uploading Terraform lock file to simulated 'tflock' directory..."
            aws s3 cp "$LOCK_FILE" s3://"$LOCK_BUCKET_NAME"/tflock/terraform-lock-file.hcl
          else
            echo "Terraform lock file not found, skipping upload."
          fi

          echo "Uploaded Terraform lock file successfully."
