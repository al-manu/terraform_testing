name: Deploy to DEV environment

on:
  push:
    branches:
      - 'feature/*'  # Trigger on any push to a feature branch

jobs:
  call-bootstrap:
    uses: al-manu/terraform_testing/.github/workflows/bootstrap.yml@feature/test_feature_work  # Call the reusable workflow at the job level
    with:
      environment: dev  # Pass the environment (dev, prod, sit)
  
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC role assumption
      contents: read   # Required for checking out the code

    environment:
      name: dev  # Set the environment as 'dev'
    
    env:
      AWS_ROLE_ARN: ${{ secrets.AWS_DEV_ROLE_ARN }}  # Set AWS role ARN for DEV
      AWS_REGION: ${{ secrets.AWS_REGION }}  # Set AWS region
      TF_VAR_TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET_DEV }}  # S3 bucket for state storage

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      # Configure AWS credentials via OIDC to assume the role
      - name: Configure AWS credentials
        id: aws_auth
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_DEV_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Terraform Format (Auto-fix)
      - name: Terraform Format (Auto-fix)
        run: |
          set -e
          terraform fmt -recursive

      # Terraform Init
      - name: Terraform Init
        run: |
          set -e
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_DEV }}" \
            -backend-config="key=terraform/dev/dev.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      # Terraform Validate
      - name: Terraform Validate
        run: |
          set -e
          terraform validate

      # Terraform Plan
      - name: Terraform Plan
        id: plan
        run: |
          set -e
          terraform plan -out=tfplan -var-file=environments/dev.tfvars

      # Check if there are changes in the plan, and skip apply if none
      - name: Check for Changes in Plan
        run: |
          set -e
          if terraform show tfplan | grep -q 'No changes. Infrastructure is up-to-date.'; then
            echo "No changes to apply."
            exit 0
          fi

      # Terraform Apply
      - name: Terraform Apply
        run: |
          set -e
          terraform apply -auto-approve tfplan

      # Cleanup Terraform workspace
      - name: Cleanup Terraform workspace
        run: |
          terraform workspace select default || terraform workspace new default
