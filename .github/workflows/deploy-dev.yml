name: Deploy to DEV environment

on:
  push:
    branches:
      # - feature/*  # Trigger on push to main branch
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC role assumption
      contents: read   # Required for checking out the code

    environment:
      name: dev  # Set the environment as 'dev'
    
    env:
      AWS_ROLE_ARN: ${{ secrets.AWS_DEV_ROLE_ARN }}  # Set AWS role ARN for DEV
      AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}  # Use the TF state bucket for this environment
      TF_STATE_FILE: "terraform/${{ github.event.inputs.environment }}/dev.tfstate"  # Path to state file in S3

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      # Configure AWS credentials via OIDC to assume the role
      - name: Configure AWS credentials
        id: aws_auth
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}  # Use the AWS_ROLE_ARN from env
          aws-region: ${{ env.AWS_REGION }}  # Use the AWS region from env

      # Terraform Format (Auto-fix)
      - name: Terraform Format (Auto-fix)
        run: |
          set -e
          terraform fmt -recursive

      # Ensure S3 Bucket exists for state storage and locking
      - name: Create S3 bucket if not exists
        run: |
          BUCKET_NAME="${{ env.TF_STATE_BUCKET }}"
          STATE_FILE="${{ env.TF_STATE_FILE }}"

          # Check if the bucket exists, if not create it
          aws s3api head-bucket --bucket $BUCKET_NAME || aws s3api create-bucket --bucket $BUCKET_NAME --region ${{ env.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }} || echo "Bucket already exists"
          
          # Create an empty state file to initialize it
          aws s3 cp /dev/null s3://$BUCKET_NAME/$STATE_FILE
          
          echo "S3 bucket $BUCKET_NAME created (if not already) and state initialized."

      # Terraform Init
      - name: Terraform Init
        run: |
          set -e
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_FILE }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"  # Encrypt state file in S3

      # Terraform Validate
      - name: Terraform Validate
        run: |
          set -e
          terraform validate

      # Terraform Plan
      - name: Terraform Plan
        id: plan
        run: |
          set -e
          terraform plan -out=tfplan -var-file=environments/dev.tfvars

      # Check for Changes in Plan and skip apply if none
      - name: Check for Changes in Plan
        run: |
          set -e
          if terraform show tfplan | grep -q 'No changes. Infrastructure is up-to-date.'; then
            echo "No changes to apply."
            exit 0
          fi

      # Terraform Apply
      - name: Terraform Apply
        run: |
          set -e
          terraform apply -auto-approve tfplan

      # Cleanup Terraform workspace
      - name: Cleanup Terraform workspace
        run: |
          terraform workspace select default || terraform workspace new default
